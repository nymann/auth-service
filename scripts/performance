#!/usr/bin/env python3

import asyncio
import time
from uuid import uuid4

import aiohttp
import typer

app = typer.Typer()


def random_email() -> str:
    return f"{uuid4()}@example.org"


def random_password() -> str:
    return f"{uuid4()}!Aa"


class AuthTest:
    def __init__(self, base_url="http://localhost:8660", semaphore_count=16):
        self.base_url = base_url
        self.semaphore = asyncio.Semaphore(semaphore_count)

    async def register(self, session: aiohttp.ClientSession, email: str, password: str) -> None:
        async with self.semaphore, session.post(
            url=f"{self.base_url}/register", json={"email": email, "password": password}
        ) as response:
            print("Register - Status:", response.status)

    async def login(self, session: aiohttp.ClientSession, email: str, password: str) -> None:
        async with self.semaphore, session.post(
            url=f"{self.base_url}/login", json={"email": email, "password": password}
        ) as response:
            print("Login - Status:", response.status)

    async def access_token(self, session: aiohttp.ClientSession) -> None:
        async with self.semaphore, session.post(url=f"{self.base_url}/access_token") as response:
            print("Access Code - Status:", response.status)

    async def logout(self, session: aiohttp.ClientSession) -> None:
        async with self.semaphore, session.delete(url=f"{self.base_url}/logout") as response:
            print("Logout - Status:", response.status)

    async def test_flow(self, access_token_repetitions: int) -> None:
        email = random_email()
        password = random_password()
        async with aiohttp.ClientSession() as session:
            await self.register(session, email, password)
            await self.login(session, email, password)
            async with asyncio.TaskGroup() as tg:
                for _ in range(access_token_repetitions):
                    tg.create_task(self.access_token(session))
            await self.logout(session)

    async def run_tests(self, repetitions: int, access_token_repetitions: int) -> None:
        async with asyncio.TaskGroup() as tg:
            for _ in range(repetitions):
                tg.create_task(self.test_flow(access_token_repetitions))


@app.command()
def test_auth(
    repetitions: int = typer.Option(200, help="Number of times the entire auth flow is tested."),
    access_token_repetitions: int = typer.Option(200, help="Number of times to get access_token in each flow."),
):
    auth_test = AuthTest()

    start_time = time.time()
    asyncio.run(auth_test.run_tests(repetitions, access_token_repetitions))
    print(time.time() - start_time)


if __name__ == "__main__":
    app()
